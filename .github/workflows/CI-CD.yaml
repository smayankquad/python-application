name: CI-CD Workflow

on:
  push:
    branches: [main]

jobs:
  flake8:
    name: Flake8 Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run Flake8
        run: |
          flake8 --max-line-length 120 .
  
  code_coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: flake8
    if: ${{ always() }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install django
          pip install coverage pytest

      - name: Run tests with coverage
        run: |
          coverage run -m unittest discover .

      - name: coverage Report
        run: |
           coverage report -m

  vulnerability_scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    needs: [code_coverage]
    if: ${{ always() }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety

      - name: Run vulnerability scan
        id: scan
        run: |
          safety check
  
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [code_coverage,vulnerability_scan]
    if: ${{ always() }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.LOGIN }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
      
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.LOGIN }}/hms:latest .
          docker push ${{ secrets.LOGIN }}/hms:latest

  Continous-Deployment:
    runs-on: ubuntu-latest
    needs: [code_coverage,vulnerability_scan,build-and-push]
    if: ${{ always() }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2  # This step checks out your repository's code

      - name: Install Azure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Login to Azure
        run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      # You may need to select the subscription if there are multiple
      # - name: Select Azure subscription
      #   run: az account set --subscription "Your Subscription Name"

      - name: Restart ACI container
        run: az container restart --name <container_name> --resource-group <resource_group_name>
        env:
          AZURE_CONTAINER_NAME: test
          AZURE_RESOURCE_GROUP: Hotelms
        # Replace <container_name> and <resource_group_name> with your actual values